"""
ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞ÏÖã HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Í∏∞
Ïù∏ÌÑ∞ÎûôÌã∞Î∏åÌïú ÏãúÍ∞ÅÌôîÏôÄ Ï¢ÖÌï©Ï†ÅÏù∏ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ï†úÍ≥µ
"""

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
import base64

class DatasetReportGenerator:
    """Îç∞Ïù¥ÌÑ∞ÏÖã Î∂ÑÏÑù Î∞è HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
    
    def __init__(self, output_dir: str = "demo_output"):
        self.output_dir = Path(output_dir)
        self.report_data = {}
        
    def generate_report(self) -> str:
        """Ï¢ÖÌï© Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        print("üìä Îç∞Ïù¥ÌÑ∞ÏÖã Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏãúÏûë...")
        
        # Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
        self._collect_data()
        
        # HTML ÏÉùÏÑ±
        html_content = self._generate_html()
        
        # ÌååÏùº Ï†ÄÏû•
        report_path = self.output_dir / "dataset_report.html"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        print(f"‚úÖ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å: {report_path}")
        return str(report_path)
    
    def _collect_data(self):
        """Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë"""
        
        # Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Î°úÎìú
        metadata_path = self.output_dir / "metadata.json"
        if metadata_path.exists():
            with open(metadata_path, 'r', encoding='utf-8') as f:
                self.report_data['metadata'] = json.load(f)
        
        # Îç∞Ïù¥ÌÑ∞ÏÖã ÌååÏùºÎì§ Î°úÎìú
        dataset_files = [
            "train.json", "validation.json", "test.json",
            "basic_dataset.json", "enhanced_dataset.json",
            "network_config_qa_dataset.json"
        ]
        
        self.report_data['datasets'] = {}
        for file_name in dataset_files:
            file_path = self.output_dir / file_name
            if file_path.exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    self.report_data['datasets'][file_name] = json.load(f)
        
        # ÏºÄÏù¥Ïä§ ÌååÏùºÎì§ Î°úÎìú
        cases_dir = self.output_dir / "cases"
        if cases_dir.exists():
            self.report_data['cases'] = {}
            for case_file in cases_dir.glob("*.json"):
                with open(case_file, 'r', encoding='utf-8') as f:
                    self.report_data['cases'][case_file.name] = json.load(f)
        
        # ÌååÏùº Î™©Î°ù ÏÉùÏÑ±
        self.report_data['file_list'] = self._get_file_list()
    
    def _get_file_list(self) -> List[Dict[str, Any]]:
        """Ï∂úÎ†• ÌååÏùº Î™©Î°ùÍ≥º Ï†ïÎ≥¥ ÏÉùÏÑ±"""
        files = []
        
        for file_path in self.output_dir.rglob("*"):
            if file_path.is_file():
                stat = file_path.stat()
                files.append({
                    'name': file_path.name,
                    'path': str(file_path.relative_to(self.output_dir)),
                    'size': stat.st_size,
                    'size_mb': stat.st_size / (1024 * 1024),
                    'modified': datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
                })
        
        return sorted(files, key=lambda x: x['size'], reverse=True)
    
    def _generate_html(self) -> str:
        """HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        
        # ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        stats = self._calculate_stats()
        
        # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
        samples = self._extract_samples()
        
        # HTML ÌÖúÌîåÎ¶ø
        html = f"""
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GIA-Re Îç∞Ïù¥ÌÑ∞ÏÖã Î≥¥Í≥†ÏÑú</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        {self._get_css()}
    </style>
</head>
<body>
    <div class="container">
        {self._generate_header()}
        {self._generate_overview(stats)}
        {self._generate_pipeline_section()}
        {self._generate_dataset_section(stats)}
        {self._generate_quality_section()}
        {self._generate_samples_section(samples)}
        {self._generate_files_section()}
        {self._generate_footer()}
    </div>
    
    <script>
        {self._get_javascript()}
    </script>
</body>
</html>
        """
        
        return html
    
    def _get_css(self) -> str:
        """CSS Ïä§ÌÉÄÏùº"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f7fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .section {
            background: white;
            margin-bottom: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            overflow: hidden;
        }
        
        .section-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .section-header h2 {
            color: #495057;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .section-content {
            padding: 25px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .pipeline-steps {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin: 20px 0;
        }
        
        .pipeline-step {
            flex: 1;
            min-width: 200px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            position: relative;
        }
        
        .pipeline-step.success {
            border-color: #28a745;
            background: #d4edda;
        }
        
        .pipeline-step.error {
            border-color: #dc3545;
            background: #f8d7da;
        }
        
        .pipeline-step::after {
            content: '‚Üí';
            position: absolute;
            right: -25px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1.5rem;
            color: #6c757d;
        }
        
        .pipeline-step:last-child::after {
            display: none;
        }
        
        .chart-container {
            width: 100%;
            height: 400px;
            margin: 20px 0;
        }
        
        .tabs {
            display: flex;
            border-bottom: 2px solid #dee2e6;
            margin-bottom: 20px;
        }
        
        .tab {
            padding: 15px 25px;
            background: #f8f9fa;
            border: none;
            border-bottom: 3px solid transparent;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            background: white;
            border-bottom-color: #667eea;
            color: #667eea;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .question-card {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            transition: box-shadow 0.3s ease;
        }
        
        .question-card:hover {
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }
        
        .question-text {
            font-weight: 600;
            color: #495057;
            margin-bottom: 10px;
            font-size: 1.1rem;
        }
        
        .answer-text {
            background: #e8f5e8;
            border: 1px solid #c3e6c3;
            border-radius: 5px;
            padding: 10px;
            font-family: 'Courier New', monospace;
            color: #155724;
            margin-bottom: 10px;
            max-height: 150px;
            overflow-y: auto;
        }
        
        .question-meta {
            font-size: 0.85rem;
            color: #6c757d;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .meta-tag {
            background: #e9ecef;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
        }
        
        .file-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .file-table th,
        .file-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        
        .file-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        
        .file-table tr:hover {
            background: #f8f9fa;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #20c997);
            transition: width 0.3s ease;
        }
        
        .badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .badge-success { background: #d4edda; color: #155724; }
        .badge-warning { background: #fff3cd; color: #856404; }
        .badge-info { background: #d1ecf1; color: #0c5460; }
        .badge-danger { background: #f8d7da; color: #721c24; }
        
        .footer {
            text-align: center;
            padding: 30px;
            color: #6c757d;
            border-top: 1px solid #dee2e6;
            margin-top: 50px;
        }
        
        .explanation-box {
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }
        
        .explanation-title {
            font-weight: 600;
            color: #1565c0;
            margin-bottom: 8px;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
            
            .pipeline-steps {
                flex-direction: column;
            }
            
            .pipeline-step::after {
                display: none;
            }
        }
        """
    
    def _generate_header(self) -> str:
        """Ìó§Îçî ÏÑπÏÖò ÏÉùÏÑ±"""
        current_time = datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº %H:%M:%S')
        
        return f"""
        <div class="header">
            <h1>üéØ GIA-Re Îç∞Ïù¥ÌÑ∞ÏÖã Î≥¥Í≥†ÏÑú</h1>
            <p>ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï ÏßàÎ¨∏-ÎãµÎ≥Ä Îç∞Ïù¥ÌÑ∞ÏÖã Ï¢ÖÌï© Î∂ÑÏÑù</p>
            <p>ÏÉùÏÑ±ÏùºÏãú: {current_time}</p>
        </div>
        """
    
    def _generate_overview(self, stats: Dict[str, Any]) -> str:
        """Í∞úÏöî ÏÑπÏÖò ÏÉùÏÑ±"""
        return f"""
        <div class="section">
            <div class="section-header">
                <h2>üìä Îç∞Ïù¥ÌÑ∞ÏÖã Í∞úÏöî</h2>
            </div>
            <div class="section-content">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{stats['total_questions']}</div>
                        <div class="stat-label">Ï¥ù ÏßàÎ¨∏ Ïàò</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['categories_count']}</div>
                        <div class="stat-label">Ïπ¥ÌÖåÍ≥†Î¶¨ Ïàò</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['devices_count']}</div>
                        <div class="stat-label">ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•ÎπÑ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['success_rate']:.1f}%</div>
                        <div class="stat-label">ÌååÏù¥ÌîÑÎùºÏù∏ ÏÑ±Í≥µÎ•†</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['avg_quality']:.2f}</div>
                        <div class="stat-label">ÌèâÍ∑† ÌíàÏßà Ï†êÏàò</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['total_size_mb']:.1f}MB</div>
                        <div class="stat-label">Ï¥ù Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞</div>
                    </div>
                </div>
                
                <div class="explanation-box">
                    <div class="explanation-title">üìà Ï£ºÏöî ÏßÄÌëú ÏÑ§Î™Ö</div>
                    <ul style="margin-left: 20px;">
                        <li><strong>Ï¥ù ÏßàÎ¨∏ Ïàò:</strong> ÏÉùÏÑ±Îêú Î™®Îì† ÏßàÎ¨∏-ÎãµÎ≥Ä ÏåçÏùò Ï¥ù Í∞úÏàò</li>
                        <li><strong>Ïπ¥ÌÖåÍ≥†Î¶¨ Ïàò:</strong> BGP, Î≥¥Ïïà, VRF Îì± Îã§ÏñëÌïú ÎÑ§Ìä∏ÏõåÌÅ¨ ÏòÅÏó≠</li>
                        <li><strong>ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•ÎπÑ:</strong> Î∂ÑÏÑùÎêú ÎùºÏö∞ÌÑ∞/Ïä§ÏúÑÏπò Í∞úÏàò</li>
                        <li><strong>ÌååÏù¥ÌîÑÎùºÏù∏ ÏÑ±Í≥µÎ•†:</strong> 6Îã®Í≥Ñ ÏÉùÏÑ± Í≥ºÏ†ïÏùò ÏÑ±Í≥µÎ•†</li>
                        <li><strong>ÌèâÍ∑† ÌíàÏßà Ï†êÏàò:</strong> BLEU, F1 Îì± Îã§Ï§ë Î©îÌä∏Î¶≠ Í∏∞Î∞ò Ï†êÏàò</li>
                    </ul>
                </div>
            </div>
        </div>
        """
    
    def _generate_pipeline_section(self) -> str:
        """ÌååÏù¥ÌîÑÎùºÏù∏ ÏÑπÏÖò ÏÉùÏÑ±"""
        metadata = self.report_data.get('metadata', {})
        generation_stats = metadata.get('generation_statistics', {})
        
        steps_html = ""
        pipeline_steps = [
            {"name": "XML ÌååÏã±", "key": "parsing", "icon": "üìÑ", "desc": "ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï ÌååÏùº Î∂ÑÏÑù"},
            {"name": "Í∏∞Ï¥à ÏßàÎ¨∏ ÏÉùÏÑ±", "key": "basic_generation", "icon": "üìù", "desc": "Í∑úÏπô Í∏∞Î∞ò ÏßàÎ¨∏ ÏÉùÏÑ±"},
            {"name": "Ïã¨Ìôî ÏßàÎ¨∏ ÏÉùÏÑ±", "key": "enhanced_generation", "icon": "ü§ñ", "desc": "LLM Í∏∞Î∞ò ÏßàÎ¨∏ ÏÉùÏÑ±"},
            {"name": "Îç∞Ïù¥ÌÑ∞ ÌÜµÌï©", "key": "assembly", "icon": "üîß", "desc": "ÏßàÎ¨∏ ÌÜµÌï© Î∞è Ï§ëÎ≥µ Ï†úÍ±∞"},
            {"name": "ÌíàÏßà Í≤ÄÏ¶ù", "key": "validation", "icon": "‚úÖ", "desc": "ÌíàÏßà ÌïÑÌÑ∞ÎßÅ"},
            {"name": "ÌèâÍ∞Ä", "key": "evaluation", "icon": "üìä", "desc": "Îã§Î©¥Ï†Å ÏÑ±Îä• ÌèâÍ∞Ä"}
        ]
        
        for step in pipeline_steps:
            success_class = "success"  # Î™®Îì† Îã®Í≥ÑÍ∞Ä ÏÑ±Í≥µÌñàÎã§Í≥† Í∞ÄÏ†ï
            
            steps_html += f"""
            <div class="pipeline-step {success_class}">
                <div style="font-size: 1.5rem; margin-bottom: 10px;">{step['icon']}</div>
                <div style="font-weight: 600; margin-bottom: 5px;">{step['name']}</div>
                <div style="font-size: 0.9rem; color: #6c757d;">
                    {step['desc']}
                </div>
            </div>
            """
        
        basic_count = generation_stats.get('basic_questions_generated', 0)
        enhanced_count = generation_stats.get('enhanced_questions_generated', 0)
        final_count = generation_stats.get('final_dataset_size', 0)
        
        return f"""
        <div class="section">
            <div class="section-header">
                <h2>üîß ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ Í≤∞Í≥º</h2>
            </div>
            <div class="section-content">
                <div class="pipeline-steps">
                    {steps_html}
                </div>
                
                <div class="explanation-box">
                    <div class="explanation-title">üìà ÏÉùÏÑ± ÌÜµÍ≥Ñ</div>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                        <div style="text-align: center; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                            <div style="font-size: 1.5rem; font-weight: bold; color: #28a745;">{basic_count}</div>
                            <div style="font-size: 0.9rem; color: #6c757d;">Í∏∞Ï¥à ÏßàÎ¨∏ ÏÉùÏÑ±</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                            <div style="font-size: 1.5rem; font-weight: bold; color: #007bff;">{enhanced_count}</div>
                            <div style="font-size: 0.9rem; color: #6c757d;">Ïã¨Ìôî ÏßàÎ¨∏ ÏÉùÏÑ±</div>
                        </div>
                        <div style="text-align: center; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                            <div style="font-size: 1.5rem; font-weight: bold; color: #6f42c1;">{final_count}</div>
                            <div style="font-size: 0.9rem; color: #6c757d;">ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞ÏÖã</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
    
    def _generate_dataset_section(self, stats: Dict[str, Any]) -> str:
        """Îç∞Ïù¥ÌÑ∞ÏÖã ÏÑπÏÖò ÏÉùÏÑ±"""
        return f"""
        <div class="section">
            <div class="section-header">
                <h2>üìö Îç∞Ïù¥ÌÑ∞ÏÖã Íµ¨ÏÑ±</h2>
            </div>
            <div class="section-content">
                <div class="tabs">
                    <button class="tab active" onclick="switchTab('split')">Train/Val/Test Î∂ÑÌï†</button>
                    <button class="tab" onclick="switchTab('categories')">Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÌè¨</button>
                    <button class="tab" onclick="switchTab('complexity')">Î≥µÏû°ÎèÑ Î∂ÑÌè¨</button>
                </div>
                
                <div id="split" class="tab-content active">
                    <div class="chart-container">
                        <canvas id="splitChart"></canvas>
                    </div>
                    <div class="explanation-box">
                        <div class="explanation-title">üìä Îç∞Ïù¥ÌÑ∞ Î∂ÑÌï† ÏÉÅÏÑ∏</div>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 10px;">
                            <div>
                                <strong>Train ({stats.get('train_count', 0)}Í∞ú):</strong>
                                <p style="font-size: 0.9rem; color: #6c757d; margin-top: 5px;">
                                    Î™®Îç∏ ÌïôÏäµÏóê ÏÇ¨Ïö©ÎêòÎäî Ï£º Îç∞Ïù¥ÌÑ∞ÏÖãÏúºÎ°ú, Ï†ÑÏ≤¥Ïùò 70%Î•º Ï∞®ÏßÄÌï©ÎãàÎã§.
                                </p>
                            </div>
                            <div>
                                <strong>Validation ({stats.get('val_count', 0)}Í∞ú):</strong>
                                <p style="font-size: 0.9rem; color: #6c757d; margin-top: 5px;">
                                    ÌïòÏù¥ÌçºÌååÎùºÎØ∏ÌÑ∞ ÌäúÎãùÍ≥º Î™®Îç∏ ÏÑ†ÌÉùÏóê ÏÇ¨Ïö©ÎêòÎäî Í≤ÄÏ¶ù Îç∞Ïù¥ÌÑ∞ÏÖãÏûÖÎãàÎã§.
                                </p>
                            </div>
                            <div>
                                <strong>Test ({stats.get('test_count', 0)}Í∞ú):</strong>
                                <p style="font-size: 0.9rem; color: #6c757d; margin-top: 5px;">
                                    ÏµúÏ¢Ö ÏÑ±Îä• ÌèâÍ∞ÄÏóê ÏÇ¨Ïö©ÎêòÎäî ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ÏÖãÏûÖÎãàÎã§.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div id="categories" class="tab-content">
                    <div class="chart-container">
                        <canvas id="categoryChart"></canvas>
                    </div>
                    <div class="explanation-box">
                        <div class="explanation-title">üè∑Ô∏è Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Î™Ö</div>
                        <ul style="margin-left: 20px;">
                            <li><strong>BGP_Consistency:</strong> Border Gateway Protocol ÎùºÏö∞ÌåÖ ÏÑ§Ï†ïÏùò ÏùºÍ¥ÄÏÑ±Í≥º Ï†ïÌôïÏÑ±ÏùÑ Í≤ÄÏ¶ùÌïòÎäî ÏßàÎ¨∏Îì§</li>
                            <li><strong>Security_Policy:</strong> SSH Ï†ëÍ∑º, AAA Ïù∏Ï¶ù, Î∞©ÌôîÎ≤Ω Îì± ÎÑ§Ìä∏ÏõåÌÅ¨ Î≥¥Ïïà Ï†ïÏ±Ö Í¥ÄÎ†® ÏßàÎ¨∏Îì§</li>
                            <li><strong>VRF_Consistency:</strong> Virtual Routing and Forwarding ÏÑ§Ï†ïÏùò Ïò¨Î∞îÎ•∏ Íµ¨ÏÑ±ÏùÑ ÌôïÏù∏ÌïòÎäî ÏßàÎ¨∏Îì§</li>
                            <li><strong>Interface_Config:</strong> ÎÑ§Ìä∏ÏõåÌÅ¨ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏÑ§Ï†ïÍ≥º Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º Ï†êÍ≤ÄÌïòÎäî ÏßàÎ¨∏Îì§</li>
                        </ul>
                    </div>
                </div>
                
                <div id="complexity" class="tab-content">
                    <div class="chart-container">
                        <canvas id="complexityChart"></canvas>
                    </div>
                    <div class="explanation-box">
                        <div class="explanation-title">üéØ Î≥µÏû°ÎèÑ Î†àÎ≤® ÏÑ§Î™Ö</div>
                        <ul style="margin-left: 20px;">
                            <li><strong>BASIC:</strong> ÏßÅÍ¥ÄÏ†ÅÏù¥Í≥† Îã®ÏàúÌïú ÌôïÏù∏ ÏßàÎ¨∏ (Ïòà: "SSHÍ∞Ä ÌôúÏÑ±ÌôîÎêú Ïû•ÎπÑÎäî?")</li>
                            <li><strong>ANALYTICAL:</strong> Îã®Ïùº Î©îÌä∏Î¶≠ Í∏∞Î∞ò Î∂ÑÏÑùÏù¥ ÌïÑÏöîÌïú ÏßàÎ¨∏ (Ïòà: "BGP ÌîºÏñ¥ ÏàòÎäî?")</li>
                            <li><strong>SYNTHETIC:</strong> Îã§Ï§ë ÏöîÏÜåÎ•º Ï¢ÖÌï©Ï†ÅÏúºÎ°ú ÌåêÎã®Ìï¥Ïïº ÌïòÎäî ÏßàÎ¨∏ (Ïòà: "ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ÑÏ≤¥ Î≥¥Ïïà ÏÉÅÌÉú ÌèâÍ∞Ä")</li>
                            <li><strong>DIAGNOSTIC:</strong> Î¨∏Ï†ú ÏßÑÎã®Í≥º Ìï¥Í≤∞Ï±Ö Ï†úÏãúÍ∞Ä ÌïÑÏöîÌïú ÏßàÎ¨∏ (Ïòà: "BGP Ïó∞Í≤∞ Ïã§Ìå® ÏõêÏù∏ Î∂ÑÏÑù")</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        """
    
    def _generate_quality_section(self) -> str:
        """ÌíàÏßà Î∂ÑÏÑù ÏÑπÏÖò ÏÉùÏÑ±"""
        eval_data = self.report_data.get('datasets', {}).get('network_config_qa_dataset.json', {})
        eval_results = eval_data.get('evaluation_results', {})
        dataset_stats = eval_results.get('dataset_statistics', {})
        
        return f"""
        <div class="section">
            <div class="section-header">
                <h2>üéØ ÌíàÏßà Î∂ÑÏÑù</h2>
            </div>
            <div class="section-content">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{dataset_stats.get('exact_match_avg', 0):.3f}</div>
                        <div class="stat-label">Ï†ïÌôïÎèÑ (Exact Match)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{dataset_stats.get('f1_score_avg', 0):.3f}</div>
                        <div class="stat-label">F1 Score</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{dataset_stats.get('long_answer_bleu', 0):.3f}</div>
                        <div class="stat-label">BLEU Score</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{dataset_stats.get('average_overall_score', 0):.3f}</div>
                        <div class="stat-label">Ï¢ÖÌï© Ï†êÏàò</div>
                    </div>
                </div>
                
                <div class="explanation-box">
                    <div class="explanation-title">üìè ÌèâÍ∞Ä Î©îÌä∏Î¶≠ ÏÉÅÏÑ∏ ÏÑ§Î™Ö</div>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 15px;">
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                            <h5 style="color: #007bff; margin-bottom: 8px;">üéØ Exact Match</h5>
                            <p style="font-size: 0.9rem;">ÏÉùÏÑ±Îêú ÎãµÎ≥ÄÏù¥ Ï†ïÎãµÍ≥º Î¨∏Ïûê Í∑∏ÎåÄÎ°ú ÏôÑÏ†ÑÌûà ÏùºÏπòÌïòÎäî ÎπÑÏú®ÏùÑ Ï∏°Ï†ïÌï©ÎãàÎã§.</p>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                            <h5 style="color: #28a745; margin-bottom: 8px;">üìä F1 Score</h5>
                            <p style="font-size: 0.9rem;">Ï†ïÎ∞ÄÎèÑ(Precision)ÏôÄ Ïû¨ÌòÑÏú®(Recall)Ïùò Ï°∞ÌôîÌèâÍ∑†ÏúºÎ°ú, ÎãµÎ≥ÄÏùò Ï†ÑÎ∞òÏ†Å ÌíàÏßàÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§.</p>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                            <h5 style="color: #6f42c1; margin-bottom: 8px;">üìù BLEU Score</h5>
                            <p style="font-size: 0.9rem;">n-gram Í∏∞Î∞òÏúºÎ°ú ÏÉùÏÑ±Îêú ÌÖçÏä§Ìä∏ÏôÄ Ï∞∏Ï°∞ ÌÖçÏä§Ìä∏ Í∞ÑÏùò Ïú†ÏÇ¨ÎèÑÎ•º Ï∏°Ï†ïÌï©ÎãàÎã§.</p>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                            <h5 style="color: #dc3545; margin-bottom: 8px;">‚≠ê Ï¢ÖÌï© Ï†êÏàò</h5>
                            <p style="font-size: 0.9rem;">Î™®Îì† Í∞úÎ≥Ñ Î©îÌä∏Î¶≠Îì§Ïùò Í∞ÄÏ§ëÌèâÍ∑†ÏúºÎ°ú Í≥ÑÏÇ∞Îêú ÏµúÏ¢Ö ÌíàÏßà Ï†êÏàòÏûÖÎãàÎã§.</p>
                        </div>
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <h4>üìà ÎãµÎ≥Ä Ïú†ÌòïÎ≥Ñ ÏÑ±Îä•</h4>
                    <div style="display: flex; gap: 20px; margin-top: 15px;">
                        <div style="flex: 1; background: #e8f5e8; padding: 15px; border-radius: 8px;">
                            <strong>Short Answer Ï†ïÌôïÎèÑ:</strong> {dataset_stats.get('short_answer_em', 0):.3f}
                            <p style="font-size: 0.9rem; margin-top: 5px;">Í∞ÑÎã®Ìïú Ìå©Ìä∏ Í∏∞Î∞ò ÏßàÎ¨∏Ïùò Ï†ïÌôïÎèÑ</p>
                        </div>
                        <div style="flex: 1; background: #fff3cd; padding: 15px; border-radius: 8px;">
                            <strong>Long Answer ÌíàÏßà:</strong> {dataset_stats.get('long_answer_em', 0):.3f}
                            <p style="font-size: 0.9rem; margin-top: 5px;">Î≥µÏû°Ìïú ÏÑ§Î™ÖÌòï ÎãµÎ≥ÄÏùò ÌíàÏßà Ï†êÏàò</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
    
    def _generate_samples_section(self, samples: List[Dict[str, Any]]) -> str:
        """ÏÉòÌîå ÏÑπÏÖò ÏÉùÏÑ±"""
        samples_html = ""
        
        for i, sample in enumerate(samples[:8]):  # ÏµúÎåÄ 8Í∞úÎßå ÌëúÏãú
            question_text = sample.get('question', 'ÏßàÎ¨∏ ÏóÜÏùå')
            answer_text = sample.get('answer', 'ÎãµÎ≥Ä ÏóÜÏùå')
            category = sample.get('category', 'ÎØ∏Î∂ÑÎ•ò')
            complexity = sample.get('complexity', 'Î∂àÎ™Ö')
            question_id = sample.get('id', f'sample-{i}')
            
            # ÎãµÎ≥ÄÏù¥ ÎÑàÎ¨¥ Í∏∏Î©¥ Ï∂ïÏïΩ
            if len(str(answer_text)) > 200:
                if isinstance(answer_text, str):
                    answer_display = answer_text[:200] + "..."
                else:
                    answer_display = str(answer_text)[:200] + "..."
            else:
                answer_display = str(answer_text)
            
            # ÎãµÎ≥Ä ÌÉÄÏûÖÏóê Îî∞Î•∏ Î±ÉÏßÄ
            answer_type = sample.get('answer_type', 'unknown')
            badge_class = 'badge-info' if answer_type == 'short' else 'badge-warning'
            
            samples_html += f"""
            <div class="question-card">
                <div class="question-text">‚ùì {question_text}</div>
                <div class="answer-text">üí° {answer_display}</div>
                <div class="question-meta">
                    <span class="meta-tag">ID: {question_id}</span>
                    <span class="badge {badge_class}">{answer_type.upper()}</span>
                    <span class="meta-tag">Ïπ¥ÌÖåÍ≥†Î¶¨: {category}</span>
                    <span class="meta-tag">Î≥µÏû°ÎèÑ: {complexity}</span>
                </div>
            </div>
            """
        
        return f"""
        <div class="section">
            <div class="section-header">
                <h2>üìù ÏßàÎ¨∏ ÏÉòÌîå</h2>
            </div>
            <div class="section-content">
                <div class="explanation-box">
                    <div class="explanation-title">üìã ÏÉòÌîå ÏÑ§Î™Ö</div>
                    <p>Ïã§Ï†ú ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú ÏÉùÏÑ±Îêú ÏßàÎ¨∏-ÎãµÎ≥Ä ÏåçÎì§Ïùò ÎåÄÌëúÏ†ÅÏù∏ ÏòàÏãúÏûÖÎãàÎã§. 
                    Í∞Å ÏßàÎ¨∏ÏùÄ Ïã§Î¨¥ÏóêÏÑú ÌôúÏö©Ìï† Ïàò ÏûàÎäî ÎÑ§Ìä∏ÏõåÌÅ¨ ÏßÄÏãùÏùÑ ÌèâÍ∞ÄÌïòÎèÑÎ°ù ÏÑ§Í≥ÑÎêòÏóàÏäµÎãàÎã§.</p>
                </div>
                {samples_html}
                {f'<p style="text-align: center; margin-top: 20px; color: #6c757d;"><em>... Ï¥ù {len(samples)}Í∞ú ÏßàÎ¨∏ Ï§ë ÏùºÎ∂Ä (Ï†ÑÏ≤¥ Î™©Î°ùÏùÄ Í∞Å JSON ÌååÏùºÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•)</em></p>' if len(samples) > 8 else ''}
            </div>
        </div>
        """
    
    def _generate_files_section(self) -> str:
        """ÌååÏùº Î™©Î°ù ÏÑπÏÖò ÏÉùÏÑ±"""
        files_html = ""
        
        file_descriptions = {
            'metadata.json': 'üîß Îç∞Ïù¥ÌÑ∞ÏÖã ÏÉùÏÑ± Í≥ºÏ†ïÏùò Î™®Îì† ÏÑ§Ï†ïÍ≥º ÌÜµÍ≥Ñ Ï†ïÎ≥¥Î•º Ìè¨Ìï®Ìïú Î©îÌÉÄÎç∞Ïù¥ÌÑ∞',
            'train.json': 'üéì Î™®Îç∏ ÌïôÏäµÏö© Îç∞Ïù¥ÌÑ∞ (Ï†ÑÏ≤¥Ïùò ÏïΩ 70%)',
            'validation.json': 'üîç ÌïòÏù¥ÌçºÌååÎùºÎØ∏ÌÑ∞ ÌäúÎãù Î∞è Î™®Îç∏ Í≤ÄÏ¶ùÏö© Îç∞Ïù¥ÌÑ∞ (ÏïΩ 15%)', 
            'test.json': 'üìä ÏµúÏ¢Ö ÏÑ±Îä• ÌèâÍ∞ÄÏö© ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ (ÏïΩ 15%)',
            'basic_dataset.json': 'üìù Í∑úÏπô Í∏∞Î∞òÏúºÎ°ú ÏÉùÏÑ±Îêú Í∏∞Ï¥à ÏßàÎ¨∏Îì§ (Ï†ïÌôïÌïú Î©îÌä∏Î¶≠ Í∏∞Î∞ò)',
            'enhanced_dataset.json': 'ü§ñ LLMÏúºÎ°ú ÏÉùÏÑ±Îêú Ïã¨Ìôî ÏßàÎ¨∏Îì§ (Î≥µÏû°Ìïú Ï∂îÎ°† Ìè¨Ìï®)',
            'network_config_qa_dataset.json': 'üìã ÏµúÏ¢Ö ÌÜµÌï© Îç∞Ïù¥ÌÑ∞ÏÖã + ÏÉÅÏÑ∏Ìïú ÌèâÍ∞Ä Í≤∞Í≥º',
            'parsed_facts.json': 'üåê XML ÌååÏùºÏóêÏÑú Ï∂îÏ∂úÌïú Íµ¨Ï°∞ÌôîÎêú ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞',
            'all_cases.json': 'üé≠ Îã§ÏñëÌïú ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÎÇòÎ¶¨Ïò§Î≥Ñ ÌôïÏû• ÏºÄÏù¥Ïä§ (Ïû•Ïï†, ÌôïÏû• Îì±)',
            'validated_dataset.json': '‚úÖ ÌíàÏßà Í≤ÄÏ¶ùÏùÑ ÌÜµÍ≥ºÌïú Í≤ÄÏ¶ùÎêú ÏßàÎ¨∏-ÎãµÎ≥Ä ÏåçÎì§',
            'assembled_basic.json': 'üîß Í∏∞Î≥∏ Î≥µÏû°ÎèÑ ÏßàÎ¨∏Îì§Îßå Î™®ÏïÑÎÜìÏùÄ Ïñ¥ÏÖàÎ∏îÎ¶¨',
            'assembled_analytical.json': 'üîç Î∂ÑÏÑùÏ†Å ÏÇ¨Í≥†Í∞Ä ÌïÑÏöîÌïú ÏßàÎ¨∏Îì§Ïùò Ïñ¥ÏÖàÎ∏îÎ¶¨',
            'assembled_diagnostic.json': 'ü©∫ ÏßÑÎã®Ìòï ÏßàÎ¨∏Îì§Ïùò Ïñ¥ÏÖàÎ∏îÎ¶¨',
            'assembled_synthetic.json': 'üîÑ Ï¢ÖÌï©Ï†Å ÌåêÎã®Ïù¥ ÌïÑÏöîÌïú ÏßàÎ¨∏Îì§Ïùò Ïñ¥ÏÖàÎ∏îÎ¶¨',
        }
        
        for file_info in self.report_data.get('file_list', []):
            file_name = file_info['name']
            description = file_descriptions.get(file_name, 'üìÑ ÏÉùÏÑ±Îêú Îç∞Ïù¥ÌÑ∞ ÌååÏùº')
            
            # ÌååÏùº ÌÅ¨Í∏∞Ïóê Îî∞Î•∏ ÏÉâÏÉÅ
            if file_info['size_mb'] > 1:
                size_class = "style='color: #dc3545; font-weight: bold;'"
            elif file_info['size_mb'] > 0.1:
                size_class = "style='color: #007bff;'"
            else:
                size_class = "style='color: #6c757d;'"
            
            files_html += f"""
            <tr>
                <td><strong>{file_name}</strong></td>
                <td>{description}</td>
                <td {size_class}>{file_info['size_mb']:.2f} MB</td>
                <td>{file_info['modified']}</td>
                <td><code>{file_info['path']}</code></td>
            </tr>
            """
        
        return f"""
        <div class="section">
            <div class="section-header">
                <h2>üìÇ Ï∂úÎ†• ÌååÏùº Î™©Î°ù</h2>
            </div>
            <div class="section-content">
                <div class="explanation-box">
                    <div class="explanation-title">üìÅ ÌååÏùº Íµ¨Ï°∞ ÏïàÎÇ¥</div>
                    <p>Îç∞Ïù¥ÌÑ∞ÏÖã ÏÉùÏÑ± Í≥ºÏ†ïÏóêÏÑú ÏÉùÏÑ±Îêú Î™®Îì† ÌååÏùºÎì§Ïùò Î™©Î°ùÍ≥º Í∞ÅÍ∞ÅÏùò Ïö©ÎèÑÏûÖÎãàÎã§. 
                    Í∞Å ÌååÏùºÏùÄ ÌäπÏ†ï Î™©Ï†ÅÏóê ÎßûÍ≤å ÏÑ§Í≥ÑÎêòÏóàÏúºÎ©∞, Ïó∞Íµ¨ÎÇò Í∞úÎ∞ú Î™©Ï†ÅÏóê Îî∞Îùº Ï†ÅÏ†àÌïú ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏó¨ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.</p>
                </div>
                
                <table class="file-table">
                    <thead>
                        <tr>
                            <th>üìã ÌååÏùºÎ™Ö</th>
                            <th>üìù ÏÑ§Î™Ö Î∞è Ïö©ÎèÑ</th>
                            <th>üìè ÌÅ¨Í∏∞</th>
                            <th>üïí ÏàòÏ†ïÏùºÏãú</th>
                            <th>üìç Í≤ΩÎ°ú</th>
                        </tr>
                    </thead>
                    <tbody>
                        {files_html}
                    </tbody>
                </table>
                
                <div style="margin-top: 20px;">
                    <h4>üéØ ÌååÏùº ÏÇ¨Ïö© Í∞ÄÏù¥Îìú</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; margin-top: 15px;">
                        <div style="background: #e8f5e8; padding: 15px; border-radius: 8px;">
                            <strong>üéì Î™®Îç∏ ÌïôÏäµÏö©:</strong>
                            <p style="font-size: 0.9rem; margin-top: 5px;">train.json, validation.json, test.json ÏÇ¨Ïö©</p>
                        </div>
                        <div style="background: #fff3cd; padding: 15px; border-radius: 8px;">
                            <strong>üìö Ïó∞Íµ¨ Î∂ÑÏÑùÏö©:</strong>
                            <p style="font-size: 0.9rem; margin-top: 5px;">network_config_qa_dataset.json + metadata.json ÏÇ¨Ïö©</p>
                        </div>
                        <div style="background: #d1ecf1; padding: 15px; border-radius: 8px;">
                            <strong>üîß Ïª§Ïä§ÌÖÄ Í∞úÎ∞úÏö©:</strong>
                            <p style="font-size: 0.9rem; margin-top: 5px;">basic_dataset.json + enhanced_dataset.json ÏÇ¨Ïö©</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
    
    def _generate_footer(self) -> str:
        """Ìë∏ÌÑ∞ ÏÉùÏÑ±"""
        return """
        <div class="footer">
            <p>üéØ <strong>GIA-Re: ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï ÏßàÎ¨∏-ÎãµÎ≥Ä Îç∞Ïù¥ÌÑ∞ÏÖã ÏÉùÏÑ± ÏãúÏä§ÌÖú</strong></p>
            <p>Ïù∏Í≥µÏßÄÎä• Í∏∞Î∞ò ÎÑ§Ìä∏ÏõåÌÅ¨ ÍµêÏú° Î∞è ÌèâÍ∞ÄÎ•º ÏúÑÌïú Í≥†ÌíàÏßà Îç∞Ïù¥ÌÑ∞ÏÖã</p>
            <p style="margin-top: 10px; font-size: 0.9rem; color: #aaa;">
                Generated by DatasetReportGenerator | 
                <a href="https://github.com/YUjinEDU/GIA-Re" style="color: #667eea;">GitHub Repository</a>
            </p>
        </div>
        """
    
    def _get_javascript(self) -> str:
        """JavaScript ÏΩîÎìú"""
        # ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
        stats = self._calculate_stats()
        
        return f"""
        // ÌÉ≠ Ï†ÑÌôò Ìï®Ïàò
        function switchTab(tabName) {{
            // Î™®Îì† ÌÉ≠Í≥º ÏΩòÌÖêÏ∏† ÎπÑÌôúÏÑ±Ìôî
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // ÏÑ†ÌÉùÎêú ÌÉ≠Í≥º ÏΩòÌÖêÏ∏† ÌôúÏÑ±Ìôî
            event.target.classList.add('active');
            document.getElementById(tabName).classList.add('active');
        }}
        
        // Ï∞®Ìä∏ ÏÉùÏÑ±
        window.addEventListener('load', function() {{
            // Train/Val/Test Î∂ÑÌï† Ï∞®Ìä∏
            const splitCtx = document.getElementById('splitChart').getContext('2d');
            new Chart(splitCtx, {{
                type: 'doughnut',
                data: {{
                    labels: ['Train', 'Validation', 'Test'],
                    datasets: [{{
                        data: [{stats.get('train_count', 0)}, {stats.get('val_count', 0)}, {stats.get('test_count', 0)}],
                        backgroundColor: ['#74b9ff', '#a29bfe', '#fd79a8'],
                        borderWidth: 3,
                        borderColor: '#fff'
                    }}]
                }},
                options: {{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {{
                        legend: {{
                            position: 'bottom',
                            labels: {{
                                padding: 20,
                                font: {{
                                    size: 14
                                }}
                            }}
                        }}
                    }}
                }}
            }});
            
            // Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÌè¨ Ï∞®Ìä∏
            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            new Chart(categoryCtx, {{
                type: 'bar',
                data: {{
                    labels: {list(stats.get('category_distribution', {}).keys())},
                    datasets: [{{
                        label: 'ÏßàÎ¨∏ Ïàò',
                        data: {list(stats.get('category_distribution', {}).values())},
                        backgroundColor: '#74b9ff',
                        borderColor: '#0984e3',
                        borderWidth: 2
                    }}]
                }},
                options: {{
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {{
                        y: {{
                            beginAtZero: true
                        }}
                    }},
                    plugins: {{
                        legend: {{
                            display: false
                        }}
                    }}
                }}
            }});
            
            // Î≥µÏû°ÎèÑ Î∂ÑÌè¨ Ï∞®Ìä∏
            const complexityCtx = document.getElementById('complexityChart').getContext('2d');
            new Chart(complexityCtx, {{
                type: 'pie',
                data: {{
                    labels: {list(stats.get('complexity_distribution', {}).keys())},
                    datasets: [{{
                        data: {list(stats.get('complexity_distribution', {}).values())},
                        backgroundColor: ['#00b894', '#fdcb6e', '#e17055', '#a29bfe'],
                        borderWidth: 3,
                        borderColor: '#fff'
                    }}]
                }},
                options: {{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {{
                        legend: {{
                            position: 'bottom',
                            labels: {{
                                padding: 20,
                                font: {{
                                    size: 14
                                }}
                            }}
                        }}
                    }}
                }}
            }});
        }});
        """
    
    def _calculate_stats(self) -> Dict[str, Any]:
        """ÌÜµÍ≥Ñ Í≥ÑÏÇ∞"""
        stats = {
            'total_questions': 0,
            'categories_count': 0,
            'devices_count': 0,
            'success_rate': 100.0,  # Í∏∞Î≥∏Í∞í
            'avg_quality': 0,
            'total_size_mb': 0,
            'train_count': 0,
            'val_count': 0,
            'test_count': 0,
            'category_distribution': {},
            'complexity_distribution': {}
        }
        
        # Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ÏóêÏÑú ÌÜµÍ≥Ñ Ï∂îÏ∂ú
        metadata = self.report_data.get('metadata', {})
        generation_stats = metadata.get('generation_statistics', {})
        
        stats['total_questions'] = generation_stats.get('final_dataset_size', 0)
        stats['devices_count'] = metadata.get('parsing_results', {}).get('total_devices', 0)
        
        # ÌíàÏßà Ï†êÏàò Í≥ÑÏÇ∞
        eval_data = self.report_data.get('datasets', {}).get('network_config_qa_dataset.json', {})
        dataset_stats = eval_data.get('evaluation_results', {}).get('dataset_statistics', {})
        stats['avg_quality'] = dataset_stats.get('average_overall_score', 0)
        
        # Îç∞Ïù¥ÌÑ∞ÏÖã Î∂ÑÌï† ÌÅ¨Í∏∞
        datasets = self.report_data.get('datasets', {})
        stats['train_count'] = len(datasets.get('train.json', []))
        stats['val_count'] = len(datasets.get('validation.json', []))
        stats['test_count'] = len(datasets.get('test.json', []))
        
        # ÌååÏùº ÌÅ¨Í∏∞ Ìï©Í≥Ñ
        stats['total_size_mb'] = sum(f['size_mb'] for f in self.report_data.get('file_list', []))
        
        # Ïπ¥ÌÖåÍ≥†Î¶¨ Î∞è Î≥µÏû°ÎèÑ Î∂ÑÌè¨ Í≥ÑÏÇ∞
        all_samples = []
        for dataset_name, dataset_data in datasets.items():
            if isinstance(dataset_data, list):
                all_samples.extend(dataset_data)
        
        # Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÌè¨
        categories = {}
        complexities = {}
        for sample in all_samples:
            cat = sample.get('category', 'ÎØ∏Î∂ÑÎ•ò')
            comp = sample.get('complexity', 'Î∂àÎ™Ö')
            categories[cat] = categories.get(cat, 0) + 1
            complexities[comp] = complexities.get(comp, 0) + 1
        
        stats['category_distribution'] = categories
        stats['complexity_distribution'] = complexities
        stats['categories_count'] = len(categories)
        
        return stats
    
    def _extract_samples(self) -> List[Dict[str, Any]]:
        """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú"""
        samples = []
        
        # Îã§ÏñëÌïú Îç∞Ïù¥ÌÑ∞ÏÖãÏóêÏÑú ÏÉòÌîå Ï∂îÏ∂ú
        datasets = self.report_data.get('datasets', {})
        
        # Basic ÏÉòÌîå
        basic_data = datasets.get('basic_dataset.json', [])
        if basic_data and len(basic_data) > 0:
            samples.extend(basic_data[:3])
        
        # Enhanced ÏÉòÌîå
        enhanced_data = datasets.get('enhanced_dataset.json', [])
        if enhanced_data and len(enhanced_data) > 0:
            samples.extend(enhanced_data[:3])
        
        # Train ÏÉòÌîå
        train_data = datasets.get('train.json', [])
        if train_data and len(train_data) > 0:
            samples.extend(train_data[:2])
        
        return samples


# ÏÇ¨Ïö© ÏòàÏãú Î∞è ÌÜµÌï© Ìï®Ïàò
def generate_dataset_report(output_dir: str = "demo_output") -> str:
    """Îç∞Ïù¥ÌÑ∞ÏÖã Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ìï®Ïàò"""
    generator = DatasetReportGenerator(output_dir)
    return generator.generate_report()


if __name__ == "__main__":
    # ÏßÅÏ†ë Ïã§Ìñâ Ïãú Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
    report_path = generate_dataset_report()
    print(f"üìä Îç∞Ïù¥ÌÑ∞ÏÖã Î≥¥Í≥†ÏÑúÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: {report_path}")
